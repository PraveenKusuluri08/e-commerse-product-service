/* eslint-disable */
// tslint:disable
/**
 * ECOMMERSE PROJECT MICROSERVICES
 * 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator+.
 * https://github.com/karlvr/openapi-generator-plus
 * Do not edit the class manually.
 */

import { Express } from 'express'
import { Api } from './models'

type FromJsonFunction<T> = (name: string, value: any) => T
type MapOf<T> = { [name: string]: T }

/**
 * A conditional type to convert an interface model to the equivalent JSON model.
 * We may represent dates as Date objects in our object model, but we must translate
 * them to strings for the JSON model.
 */
type ToJson<T> =
	T extends Date ? string
	: T extends object ? {
		[P in keyof T]: ToJson<T[P]>
	}
	: T extends (infer R)[] ? ToJson<R>[]
	: T

export function arrayFromJson<T>(next: FromJsonFunction<T>): FromJsonFunction<T[]> {
	return function(name: string, value: any) {
		if (typeof value !== 'object' || typeof value.length !== 'number') {
			throw `Invalid type for ${name}: expected array got ${typeof value}`
		}
	
		const result: T[] = []
		for (const el of value) {
			result.push(next(name, el))
		}
		return result
	}
}

export function arrayToJson<T>(next: FromJsonFunction<T>): FromJsonFunction<T[]> {
	return arrayFromJson(next)
}

export function mapFromJson<T>(next: FromJsonFunction<T>): FromJsonFunction<MapOf<T>> {
	return function(name: string, value: any) {
		if (typeof value !== 'object') {
			throw `Invalid type for ${name}: expected object got ${typeof value}`
		}
	
		const result: MapOf<T> = {}
		for (const key in value) {
			if (value.hasOwnProperty(key)) {
				result[key] = next(name, value[key])
			}
		}
		return result
	}
}

export function mapToJson<T>(next: FromJsonFunction<T>): FromJsonFunction<MapOf<T>> {
	return mapFromJson(next)
}

export function allowNull<T>(next: FromJsonFunction<T>): FromJsonFunction<T | null> {
	return function(name: string, value: any) {
		if (value === null) {
			return null
		}
		return next(name, value)
	}
}

export function allowUndefined<T>(next: FromJsonFunction<T>): FromJsonFunction<T | undefined> {
	return function(name: string, value: any) {
		if (value === undefined) {
			return undefined
		}
		return next(name, value)
	}
}

export function allowNullOrUndefined<T>(next: FromJsonFunction<T>): FromJsonFunction<T | null | undefined> {
	return function(name: string, value: any) {
		if (value === null) {
			return null
		}
		if (value === undefined) {
			return undefined
		}
		return next(name, value)
	}
}

export function unsupportedFromJson(name: string, value: any): unknown {
	if (value === undefined) {
		throw `Invalid type for ${name}: expected unknown got undefined`
	}
	return value
}

export function unsupportedToJson(name: string, value: unknown): any {
	return unsupportedFromJson(name, value)
}

export function parseUnsupported(name: string, value: any): unknown {
	if (value === undefined) {
		throw `Invalid value for ${name}: expected unknown got undefined`
	}
	return value
}

export function booleanFromJson(name: string, value: any): boolean {
	if (typeof value !== 'boolean') {
		throw `Invalid type for ${name}: expected boolean got ${typeof value}`
	}
	return value
}

export function booleanToJson(name: string, value: boolean): any {
	return booleanFromJson(name, value)
}

export function parseBoolean(name: string, value: any): boolean {
	if (value === 'true') {
		return true
	} else if (value === 'false') {
		return false
	} else {
		throw `Invalid value for ${name}: expected boolean got "${value}"`
	}
}

export function stringFromJson(name: string, value: any): string {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	return value
}

export function stringToJson(name: string, value: string): any {
	return stringFromJson(name, value)
}

export function binaryFromJson(name: string, value: any): Buffer {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	return new Buffer(value, 'base64')
}

export function binaryToJson(name: string, value: string | Buffer): string {
	if (typeof value === 'string') {
		return value
	} else {
		return value.toString('base64')
	}
}

export function parseString(name: string, value: any): string {
	if (value === undefined) {
		throw `Invalid value for ${name}: expected string got undefined`
	}
	if (typeof value === 'string') {
		return value
	}
	if (typeof value === 'object' && typeof value.length === 'number') {
		if (value.length > 0) {
			return value[0]
		}
	}

	throw `Invalid value for ${name}: expected string got ${typeof value}`
}

export function integerFromJson(name: string, value: any): number {
	if (typeof value !== 'number') {
		throw `Invalid type for ${name}: expected number got ${typeof value}`
	}
	if (isNaN(value)) {
		throw `Invalid NaN for ${name}`
	}
	if (Math.floor(value) !== value) {
		throw `Invalid value for ${name}: expected integer got "${value}"`
	}
	return value
}

export function integerToJson(name: string, value: number): any {
	return integerFromJson(name, value)
}

export function parseInteger(name: string, value: any): number {
	if (typeof value === 'object' && typeof value.length === 'number' && value.length > 0) {
		value = value[0]
	}
	if (typeof value === 'string') {
		if (value.indexOf('.') !== -1) {
			throw `Invalid value for ${name}: expected integer got "${value}"`
		}

		const result = parseInt(value, 10)
		if (isNaN(result)) {
			throw `Invalid value for ${name}: expected integer got "${value}"`
		}
		return result
	}
	throw `Invalid value for ${name}: expected integer got ${typeof value}`
}

export function numberFromJson(name: string, value: any): number {
	if (typeof value !== 'number') {
		throw `Invalid type for ${name}: expected number got ${typeof value}`
	}
	if (isNaN(value)) {
		throw `Invalid NaN for ${name}`
	}
	return value
}

export function numberToJson(name: string, value: number): any {
	return numberFromJson(name, value)
}

export function parseNumber(name: string, value: any): number {
	if (typeof value === 'object' && typeof value.length === 'number' && value.length > 0) {
		value = value[0]
	}
	if (typeof value === 'string') {
		const result = parseFloat(value)
		if (isNaN(result)) {
			throw `Invalid value for ${name}: expected float got "${value}"`
		}
		return result
	}
	throw `Invalid value for ${name}: expected number got ${typeof value}`
}

export function dateFromJson(name: string, value: any): string {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	if (!value.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)) {
		throw `Invalid value for ${name}: expected valid date string got "${value}"`
	}
	return value
}

export function parseDate(name: string, value: any): string {
	return dateFromJson(name, value)
}

export function dateToJson(name: string, value: string): string {
	return dateFromJson(name, value)
}

export function dateTimeFromJson(name: string, value: any): Date {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	if (!value.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}(:[0-9]{2}(\.[0-9]+)?)?(Z|(\+|-)[0-9]{2}(:?[0-9]{2})?)$/)) {
		throw `Invalid value for ${name}: expected valid datetime string got "${value}"`
	}
	return new Date(value)
}

export function parseDateTime(name: string, value: any): Date {
	return dateTimeFromJson(name, value)
}

export function dateTimeToJson(name: string, value: Date): string {
	if (typeof value !== 'object' || typeof value.toISOString !== 'function') {
		throw `Invalid type for ${name}: expected Date got ${typeof value}`
	}
	return value.toISOString()
}

export function timeFromJson(name: string, value: any): string {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	if (!value.match(/^[0-9]{2}:[0-9]{2}(:[0-9]{2}(\.[0-9]+)?)?$/)) {
		throw `Invalid value for ${name}: expected valid time string got "${value}"`
	}
	return value
}

export function parseTime(name: string, value: any): string {
	return timeFromJson(name, value)
}

export function timeToJson(name: string, value: string): string {
	return timeFromJson(name, value)
}

/* Model conversion functions */

const ApiCategoryBodyKeys: string[] = ['categoryName', 'subcategory']

function modelApiCategoryBodyFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CategoryBody {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCategoryBodyKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CategoryBody = {
		'categoryName': stringFromJson(`${name}.categoryName`, value['categoryName']),
		'subcategory': stringFromJson(`${name}.subcategory`, value['subcategory']),
	}

	return result
}

function modelApiCategoryBodyToJsonContent(name: string, value: Api.CategoryBody, knownKeys: Record<string, boolean> = {}): ToJson<Api.CategoryBody> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCategoryBodyKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.CategoryBody> = {
		'categoryName': stringToJson(`${name}.categoryName`, value['categoryName']),
		'subcategory': stringToJson(`${name}.subcategory`, value['subcategory']),
	}

	return result
}

export function modelApiCategoryBodyFromJson(name: string, value: any): Api.CategoryBody {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CategoryBody = modelApiCategoryBodyFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CategoryBody: ${key}`)
		}
	}

	return result
}

export function modelApiCategoryBodyToJson(name: string, value: Api.CategoryBody): ToJson<Api.CategoryBody> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.CategoryBody> = modelApiCategoryBodyToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CategoryBody: ${key}`)
		}
	}

	return result
}

const ApiCategoryCreateResponseKeys: string[] = ['code', 'message', 'createdAt', 'createdBy']

function modelApiCategoryCreateResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CategoryCreateResponse {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCategoryCreateResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CategoryCreateResponse = {
		'code': allowUndefined(stringFromJson)(`${name}.code`, value['code']),
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
		'createdAt': allowUndefined(stringFromJson)(`${name}.createdAt`, value['createdAt']),
		'createdBy': allowUndefined(stringFromJson)(`${name}.createdBy`, value['createdBy']),
	}

	return result
}

function modelApiCategoryCreateResponseToJsonContent(name: string, value: Api.CategoryCreateResponse, knownKeys: Record<string, boolean> = {}): ToJson<Api.CategoryCreateResponse> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCategoryCreateResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.CategoryCreateResponse> = {
		'code': allowUndefined(stringToJson)(`${name}.code`, value['code']),
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
		'createdAt': allowUndefined(stringToJson)(`${name}.createdAt`, value['createdAt']),
		'createdBy': allowUndefined(stringToJson)(`${name}.createdBy`, value['createdBy']),
	}

	return result
}

export function modelApiCategoryCreateResponseFromJson(name: string, value: any): Api.CategoryCreateResponse {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CategoryCreateResponse = modelApiCategoryCreateResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CategoryCreateResponse: ${key}`)
		}
	}

	return result
}

export function modelApiCategoryCreateResponseToJson(name: string, value: Api.CategoryCreateResponse): ToJson<Api.CategoryCreateResponse> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.CategoryCreateResponse> = modelApiCategoryCreateResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CategoryCreateResponse: ${key}`)
		}
	}

	return result
}

const ApiCategoryCreationFailureKeys: string[] = ['code', 'message']

function modelApiCategoryCreationFailureFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CategoryCreationFailure {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCategoryCreationFailureKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CategoryCreationFailure = {
		'code': allowUndefined(stringFromJson)(`${name}.code`, value['code']),
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiCategoryCreationFailureToJsonContent(name: string, value: Api.CategoryCreationFailure, knownKeys: Record<string, boolean> = {}): ToJson<Api.CategoryCreationFailure> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCategoryCreationFailureKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.CategoryCreationFailure> = {
		'code': allowUndefined(stringToJson)(`${name}.code`, value['code']),
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiCategoryCreationFailureFromJson(name: string, value: any): Api.CategoryCreationFailure {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CategoryCreationFailure = modelApiCategoryCreationFailureFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CategoryCreationFailure: ${key}`)
		}
	}

	return result
}

export function modelApiCategoryCreationFailureToJson(name: string, value: Api.CategoryCreationFailure): ToJson<Api.CategoryCreationFailure> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.CategoryCreationFailure> = modelApiCategoryCreationFailureToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CategoryCreationFailure: ${key}`)
		}
	}

	return result
}

const ApiCreateProductKeys: string[] = ['itemName', 'description', 'price', 'discount_id', 'rating', 'category_id', 'inventory_id']

function modelApiCreateProductFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CreateProduct {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateProductKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CreateProduct = {
		'itemName': allowUndefined(stringFromJson)(`${name}.itemName`, value['itemName']),
		'description': allowUndefined(stringFromJson)(`${name}.description`, value['description']),
		'price': allowUndefined(numberFromJson)(`${name}.price`, value['price']),
		'discount_id': allowUndefined(numberFromJson)(`${name}.discount_id`, value['discount_id']),
		'rating': allowUndefined(integerFromJson)(`${name}.rating`, value['rating']),
		'category_id': allowUndefined(integerFromJson)(`${name}.category_id`, value['category_id']),
		'inventory_id': allowUndefined(stringFromJson)(`${name}.inventory_id`, value['inventory_id']),
	}

	return result
}

function modelApiCreateProductToJsonContent(name: string, value: Api.CreateProduct, knownKeys: Record<string, boolean> = {}): ToJson<Api.CreateProduct> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateProductKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.CreateProduct> = {
		'itemName': allowUndefined(stringToJson)(`${name}.itemName`, value['itemName']),
		'description': allowUndefined(stringToJson)(`${name}.description`, value['description']),
		'price': allowUndefined(numberToJson)(`${name}.price`, value['price']),
		'discount_id': allowUndefined(numberToJson)(`${name}.discount_id`, value['discount_id']),
		'rating': allowUndefined(integerToJson)(`${name}.rating`, value['rating']),
		'category_id': allowUndefined(integerToJson)(`${name}.category_id`, value['category_id']),
		'inventory_id': allowUndefined(stringToJson)(`${name}.inventory_id`, value['inventory_id']),
	}

	return result
}

export function modelApiCreateProductFromJson(name: string, value: any): Api.CreateProduct {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CreateProduct = modelApiCreateProductFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateProduct: ${key}`)
		}
	}

	return result
}

export function modelApiCreateProductToJson(name: string, value: Api.CreateProduct): ToJson<Api.CreateProduct> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.CreateProduct> = modelApiCreateProductToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateProduct: ${key}`)
		}
	}

	return result
}

const ApiCreateProduct201ResponseKeys: string[] = ['message']

function modelApiCreateProduct201ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CreateProduct201Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateProduct201ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CreateProduct201Response = {
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiCreateProduct201ResponseToJsonContent(name: string, value: Api.CreateProduct201Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.CreateProduct201Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateProduct201ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.CreateProduct201Response> = {
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiCreateProduct201ResponseFromJson(name: string, value: any): Api.CreateProduct201Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CreateProduct201Response = modelApiCreateProduct201ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateProduct201Response: ${key}`)
		}
	}

	return result
}

export function modelApiCreateProduct201ResponseToJson(name: string, value: Api.CreateProduct201Response): ToJson<Api.CreateProduct201Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.CreateProduct201Response> = modelApiCreateProduct201ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateProduct201Response: ${key}`)
		}
	}

	return result
}

const ApiCreateProduct500ResponseKeys: string[] = ['message']

function modelApiCreateProduct500ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.CreateProduct500Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateProduct500ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.CreateProduct500Response = {
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiCreateProduct500ResponseToJsonContent(name: string, value: Api.CreateProduct500Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.CreateProduct500Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiCreateProduct500ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.CreateProduct500Response> = {
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiCreateProduct500ResponseFromJson(name: string, value: any): Api.CreateProduct500Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.CreateProduct500Response = modelApiCreateProduct500ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateProduct500Response: ${key}`)
		}
	}

	return result
}

export function modelApiCreateProduct500ResponseToJson(name: string, value: Api.CreateProduct500Response): ToJson<Api.CreateProduct500Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.CreateProduct500Response> = modelApiCreateProduct500ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.CreateProduct500Response: ${key}`)
		}
	}

	return result
}

const ApiGetAllCategories500ResponseKeys: string[] = ['message']

function modelApiGetAllCategories500ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.GetAllCategories500Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiGetAllCategories500ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.GetAllCategories500Response = {
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiGetAllCategories500ResponseToJsonContent(name: string, value: Api.GetAllCategories500Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.GetAllCategories500Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiGetAllCategories500ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.GetAllCategories500Response> = {
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiGetAllCategories500ResponseFromJson(name: string, value: any): Api.GetAllCategories500Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.GetAllCategories500Response = modelApiGetAllCategories500ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.GetAllCategories500Response: ${key}`)
		}
	}

	return result
}

export function modelApiGetAllCategories500ResponseToJson(name: string, value: Api.GetAllCategories500Response): ToJson<Api.GetAllCategories500Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.GetAllCategories500Response> = modelApiGetAllCategories500ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.GetAllCategories500Response: ${key}`)
		}
	}

	return result
}

const ApiGetCategory500ResponseKeys: string[] = ['message']

function modelApiGetCategory500ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.GetCategory500Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiGetCategory500ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.GetCategory500Response = {
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiGetCategory500ResponseToJsonContent(name: string, value: Api.GetCategory500Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.GetCategory500Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiGetCategory500ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.GetCategory500Response> = {
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiGetCategory500ResponseFromJson(name: string, value: any): Api.GetCategory500Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.GetCategory500Response = modelApiGetCategory500ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.GetCategory500Response: ${key}`)
		}
	}

	return result
}

export function modelApiGetCategory500ResponseToJson(name: string, value: Api.GetCategory500Response): ToJson<Api.GetCategory500Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.GetCategory500Response> = modelApiGetCategory500ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.GetCategory500Response: ${key}`)
		}
	}

	return result
}

const ApiGetRecordKeys: string[] = ['data']

function modelApiGetRecordFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.GetRecord {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiGetRecordKeys.forEach(k => knownKeys[k] = true)

	const result: Api.GetRecord = {
		'data': allowUndefined(modelApiGetRecordDataFromJson)(`${name}.data`, value['data']),
	}

	return result
}

function modelApiGetRecordToJsonContent(name: string, value: Api.GetRecord, knownKeys: Record<string, boolean> = {}): ToJson<Api.GetRecord> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiGetRecordKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.GetRecord> = {
		'data': allowUndefined(modelApiGetRecordDataToJson)(`${name}.data`, value['data']),
	}

	return result
}

export function modelApiGetRecordFromJson(name: string, value: any): Api.GetRecord {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.GetRecord = modelApiGetRecordFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.GetRecord: ${key}`)
		}
	}

	return result
}

export function modelApiGetRecordToJson(name: string, value: Api.GetRecord): ToJson<Api.GetRecord> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.GetRecord> = modelApiGetRecordToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.GetRecord: ${key}`)
		}
	}

	return result
}

const ApiGetRecordDataKeys: string[] = ['categoryName', 'id', 'createAt', 'itemId', 'description', 'price', 'rating', 'category', 'images', 'itemName']

function modelApiGetRecordDataFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.GetRecord.Data {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiGetRecordDataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.GetRecord.Data = {
		'categoryName': allowUndefined(stringFromJson)(`${name}.categoryName`, value['categoryName']),
		'id': allowUndefined(stringFromJson)(`${name}.id`, value['id']),
		'createAt': allowUndefined(stringFromJson)(`${name}.createAt`, value['createAt']),
		'itemId': allowUndefined(stringFromJson)(`${name}.itemId`, value['itemId']),
		'description': allowUndefined(stringFromJson)(`${name}.description`, value['description']),
		'price': allowUndefined(numberFromJson)(`${name}.price`, value['price']),
		'rating': allowUndefined(integerFromJson)(`${name}.rating`, value['rating']),
		'category': allowUndefined(integerFromJson)(`${name}.category`, value['category']),
		'images': allowUndefined(arrayFromJson(stringFromJson))(`${name}.images`, value['images']),
		'itemName': allowUndefined(stringFromJson)(`${name}.itemName`, value['itemName']),
	}

	return result
}

function modelApiGetRecordDataToJsonContent(name: string, value: Api.GetRecord.Data, knownKeys: Record<string, boolean> = {}): ToJson<Api.GetRecord.Data> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiGetRecordDataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.GetRecord.Data> = {
		'categoryName': allowUndefined(stringToJson)(`${name}.categoryName`, value['categoryName']),
		'id': allowUndefined(stringToJson)(`${name}.id`, value['id']),
		'createAt': allowUndefined(stringToJson)(`${name}.createAt`, value['createAt']),
		'itemId': allowUndefined(stringToJson)(`${name}.itemId`, value['itemId']),
		'description': allowUndefined(stringToJson)(`${name}.description`, value['description']),
		'price': allowUndefined(numberToJson)(`${name}.price`, value['price']),
		'rating': allowUndefined(integerToJson)(`${name}.rating`, value['rating']),
		'category': allowUndefined(integerToJson)(`${name}.category`, value['category']),
		'images': allowUndefined(arrayToJson(stringToJson))(`${name}.images`, value['images']),
		'itemName': allowUndefined(stringToJson)(`${name}.itemName`, value['itemName']),
	}

	return result
}

export function modelApiGetRecordDataFromJson(name: string, value: any): Api.GetRecord.Data {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.GetRecord.Data = modelApiGetRecordDataFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.GetRecord.Data: ${key}`)
		}
	}

	return result
}

export function modelApiGetRecordDataToJson(name: string, value: Api.GetRecord.Data): ToJson<Api.GetRecord.Data> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.GetRecord.Data> = modelApiGetRecordDataToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.GetRecord.Data: ${key}`)
		}
	}

	return result
}

const ApiImageUploadProduct200ResponseKeys: string[] = ['message']

function modelApiImageUploadProduct200ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ImageUploadProduct200Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiImageUploadProduct200ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ImageUploadProduct200Response = {
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiImageUploadProduct200ResponseToJsonContent(name: string, value: Api.ImageUploadProduct200Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.ImageUploadProduct200Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiImageUploadProduct200ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.ImageUploadProduct200Response> = {
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiImageUploadProduct200ResponseFromJson(name: string, value: any): Api.ImageUploadProduct200Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ImageUploadProduct200Response = modelApiImageUploadProduct200ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.ImageUploadProduct200Response: ${key}`)
		}
	}

	return result
}

export function modelApiImageUploadProduct200ResponseToJson(name: string, value: Api.ImageUploadProduct200Response): ToJson<Api.ImageUploadProduct200Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.ImageUploadProduct200Response> = modelApiImageUploadProduct200ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.ImageUploadProduct200Response: ${key}`)
		}
	}

	return result
}

const ApiImageUploadProduct500ResponseKeys: string[] = ['message']

function modelApiImageUploadProduct500ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ImageUploadProduct500Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiImageUploadProduct500ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ImageUploadProduct500Response = {
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiImageUploadProduct500ResponseToJsonContent(name: string, value: Api.ImageUploadProduct500Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.ImageUploadProduct500Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiImageUploadProduct500ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.ImageUploadProduct500Response> = {
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiImageUploadProduct500ResponseFromJson(name: string, value: any): Api.ImageUploadProduct500Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ImageUploadProduct500Response = modelApiImageUploadProduct500ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.ImageUploadProduct500Response: ${key}`)
		}
	}

	return result
}

export function modelApiImageUploadProduct500ResponseToJson(name: string, value: Api.ImageUploadProduct500Response): ToJson<Api.ImageUploadProduct500Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.ImageUploadProduct500Response> = modelApiImageUploadProduct500ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.ImageUploadProduct500Response: ${key}`)
		}
	}

	return result
}

const ApiImageUploadProductRequestKeys: string[] = ['file', 'itemId']

function modelApiImageUploadProductRequestFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ImageUploadProductRequest {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiImageUploadProductRequestKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ImageUploadProductRequest = {
		'file': binaryFromJson(`${name}.file`, value['file']),
		'itemId': allowUndefined(stringFromJson)(`${name}.itemId`, value['itemId']),
	}

	return result
}

function modelApiImageUploadProductRequestToJsonContent(name: string, value: Api.ImageUploadProductRequest, knownKeys: Record<string, boolean> = {}): ToJson<Api.ImageUploadProductRequest> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiImageUploadProductRequestKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.ImageUploadProductRequest> = {
		'file': binaryToJson(`${name}.file`, value['file']),
		'itemId': allowUndefined(stringToJson)(`${name}.itemId`, value['itemId']),
	}

	return result
}

export function modelApiImageUploadProductRequestFromJson(name: string, value: any): Api.ImageUploadProductRequest {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ImageUploadProductRequest = modelApiImageUploadProductRequestFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.ImageUploadProductRequest: ${key}`)
		}
	}

	return result
}

export function modelApiImageUploadProductRequestToJson(name: string, value: Api.ImageUploadProductRequest): ToJson<Api.ImageUploadProductRequest> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.ImageUploadProductRequest> = modelApiImageUploadProductRequestToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.ImageUploadProductRequest: ${key}`)
		}
	}

	return result
}

const ApiImageUploadProductRequestMultipartFormDataKeys: string[] = ['file', 'itemId']

function modelApiImageUploadProductRequestMultipartFormDataFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ImageUploadProductRequest.MultipartFormData {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiImageUploadProductRequestMultipartFormDataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ImageUploadProductRequest.MultipartFormData = {
		'file': modelApiImageUploadProductRequestMultipartFormDataFilePartFromJson(`${name}.file`, value['file']),
		'itemId': allowUndefined(stringFromJson)(`${name}.itemId`, value['itemId']),
	}

	return result
}

function modelApiImageUploadProductRequestMultipartFormDataToJsonContent(name: string, value: Api.ImageUploadProductRequest.MultipartFormData, knownKeys: Record<string, boolean> = {}): ToJson<Api.ImageUploadProductRequest.MultipartFormData> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiImageUploadProductRequestMultipartFormDataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.ImageUploadProductRequest.MultipartFormData> = {
		'file': modelApiImageUploadProductRequestMultipartFormDataFilePartToJson(`${name}.file`, value['file']),
		'itemId': allowUndefined(stringToJson)(`${name}.itemId`, value['itemId']),
	}

	return result
}

export function modelApiImageUploadProductRequestMultipartFormDataFromJson(name: string, value: any): Api.ImageUploadProductRequest.MultipartFormData {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ImageUploadProductRequest.MultipartFormData = modelApiImageUploadProductRequestMultipartFormDataFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.ImageUploadProductRequest.MultipartFormData: ${key}`)
		}
	}

	return result
}

export function modelApiImageUploadProductRequestMultipartFormDataToJson(name: string, value: Api.ImageUploadProductRequest.MultipartFormData): ToJson<Api.ImageUploadProductRequest.MultipartFormData> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.ImageUploadProductRequest.MultipartFormData> = modelApiImageUploadProductRequestMultipartFormDataToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.ImageUploadProductRequest.MultipartFormData: ${key}`)
		}
	}

	return result
}

const ApiImageUploadProductRequestMultipartFormDataFilePartKeys: string[] = ['value', 'filename']

function modelApiImageUploadProductRequestMultipartFormDataFilePartFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.ImageUploadProductRequest.MultipartFormData.FilePart {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiImageUploadProductRequestMultipartFormDataFilePartKeys.forEach(k => knownKeys[k] = true)

	const result: Api.ImageUploadProductRequest.MultipartFormData.FilePart = {
		'value': binaryFromJson(`${name}.value`, value['value']),
		'filename': allowUndefined(stringFromJson)(`${name}.filename`, value['filename']),
	}

	return result
}

function modelApiImageUploadProductRequestMultipartFormDataFilePartToJsonContent(name: string, value: Api.ImageUploadProductRequest.MultipartFormData.FilePart, knownKeys: Record<string, boolean> = {}): ToJson<Api.ImageUploadProductRequest.MultipartFormData.FilePart> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiImageUploadProductRequestMultipartFormDataFilePartKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.ImageUploadProductRequest.MultipartFormData.FilePart> = {
		'value': binaryToJson(`${name}.value`, value['value']),
		'filename': allowUndefined(stringToJson)(`${name}.filename`, value['filename']),
	}

	return result
}

export function modelApiImageUploadProductRequestMultipartFormDataFilePartFromJson(name: string, value: any): Api.ImageUploadProductRequest.MultipartFormData.FilePart {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.ImageUploadProductRequest.MultipartFormData.FilePart = modelApiImageUploadProductRequestMultipartFormDataFilePartFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.ImageUploadProductRequest.MultipartFormData.FilePart: ${key}`)
		}
	}

	return result
}

export function modelApiImageUploadProductRequestMultipartFormDataFilePartToJson(name: string, value: Api.ImageUploadProductRequest.MultipartFormData.FilePart): ToJson<Api.ImageUploadProductRequest.MultipartFormData.FilePart> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.ImageUploadProductRequest.MultipartFormData.FilePart> = modelApiImageUploadProductRequestMultipartFormDataFilePartToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.ImageUploadProductRequest.MultipartFormData.FilePart: ${key}`)
		}
	}

	return result
}

const ApiUpdateCategory200ResponseKeys: string[] = ['message']

function modelApiUpdateCategory200ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UpdateCategory200Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUpdateCategory200ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UpdateCategory200Response = {
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiUpdateCategory200ResponseToJsonContent(name: string, value: Api.UpdateCategory200Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.UpdateCategory200Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUpdateCategory200ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.UpdateCategory200Response> = {
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiUpdateCategory200ResponseFromJson(name: string, value: any): Api.UpdateCategory200Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UpdateCategory200Response = modelApiUpdateCategory200ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.UpdateCategory200Response: ${key}`)
		}
	}

	return result
}

export function modelApiUpdateCategory200ResponseToJson(name: string, value: Api.UpdateCategory200Response): ToJson<Api.UpdateCategory200Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.UpdateCategory200Response> = modelApiUpdateCategory200ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.UpdateCategory200Response: ${key}`)
		}
	}

	return result
}

const ApiUpdateCategory500ResponseKeys: string[] = ['message']

function modelApiUpdateCategory500ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UpdateCategory500Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUpdateCategory500ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UpdateCategory500Response = {
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiUpdateCategory500ResponseToJsonContent(name: string, value: Api.UpdateCategory500Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.UpdateCategory500Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUpdateCategory500ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.UpdateCategory500Response> = {
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiUpdateCategory500ResponseFromJson(name: string, value: any): Api.UpdateCategory500Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UpdateCategory500Response = modelApiUpdateCategory500ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.UpdateCategory500Response: ${key}`)
		}
	}

	return result
}

export function modelApiUpdateCategory500ResponseToJson(name: string, value: Api.UpdateCategory500Response): ToJson<Api.UpdateCategory500Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.UpdateCategory500Response> = modelApiUpdateCategory500ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.UpdateCategory500Response: ${key}`)
		}
	}

	return result
}

const ApiUpdateProduct200ResponseKeys: string[] = ['message']

function modelApiUpdateProduct200ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UpdateProduct200Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUpdateProduct200ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UpdateProduct200Response = {
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiUpdateProduct200ResponseToJsonContent(name: string, value: Api.UpdateProduct200Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.UpdateProduct200Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUpdateProduct200ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.UpdateProduct200Response> = {
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiUpdateProduct200ResponseFromJson(name: string, value: any): Api.UpdateProduct200Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UpdateProduct200Response = modelApiUpdateProduct200ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.UpdateProduct200Response: ${key}`)
		}
	}

	return result
}

export function modelApiUpdateProduct200ResponseToJson(name: string, value: Api.UpdateProduct200Response): ToJson<Api.UpdateProduct200Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.UpdateProduct200Response> = modelApiUpdateProduct200ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.UpdateProduct200Response: ${key}`)
		}
	}

	return result
}

const ApiUpdateProduct500ResponseKeys: string[] = ['message']

function modelApiUpdateProduct500ResponseFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.UpdateProduct500Response {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUpdateProduct500ResponseKeys.forEach(k => knownKeys[k] = true)

	const result: Api.UpdateProduct500Response = {
		'message': allowUndefined(stringFromJson)(`${name}.message`, value['message']),
	}

	return result
}

function modelApiUpdateProduct500ResponseToJsonContent(name: string, value: Api.UpdateProduct500Response, knownKeys: Record<string, boolean> = {}): ToJson<Api.UpdateProduct500Response> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiUpdateProduct500ResponseKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.UpdateProduct500Response> = {
		'message': allowUndefined(stringToJson)(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiUpdateProduct500ResponseFromJson(name: string, value: any): Api.UpdateProduct500Response {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.UpdateProduct500Response = modelApiUpdateProduct500ResponseFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.UpdateProduct500Response: ${key}`)
		}
	}

	return result
}

export function modelApiUpdateProduct500ResponseToJson(name: string, value: Api.UpdateProduct500Response): ToJson<Api.UpdateProduct500Response> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.UpdateProduct500Response> = modelApiUpdateProduct500ResponseToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.UpdateProduct500Response: ${key}`)
		}
	}

	return result
}
