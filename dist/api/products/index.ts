/* eslint-disable */
// tslint:disable
/**
 * ECOMMERSE PROJECT MICROSERVICES
 * 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator+.
 * https://github.com/karlvr/openapi-generator-plus
 * Do not edit the class manually.
 */

import { Express } from 'express'
import passport from 'passport'
import * as t from './types'
import * as v from '../../validation'
import { Api } from '../../models'

export default function(app: Express, impl: t.ProductsApi) {
	app.post(
		'/product/imageupload',
		function (req, res) {
			try {
				function __body() {
					const __contentType = req.get('Content-Type')
					const __mimeType = __contentType ? __contentType.replace(/;.*/, '') : undefined

					if (__mimeType === 'multipart/form-data') {
						return req.body; /* Unsupported mimeType */
											}
					console.error(`Invalid request content type: ${__contentType}`)
					throw new Error(`Invalid request content type: ${__contentType}`)
				}

				impl.imageUploadProduct(__body()).then(function (response) {
					if (response.status === 200) {
						let body: any
						try {
							body = v.modelApiImageUploadProduct200ResponseToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in products.imageUploadProduct', error)
							res.status(500)
							res.send()
							return
						}

						res.status(200)
						res.send(body)
						return
					}
					if (response.status === 500) {
						let body: any
						try {
							body = v.modelApiImageUploadProduct500ResponseToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in products.imageUploadProduct', error)
							res.status(500)
							res.send()
							return
						}

						res.status(500)
						res.send(body)
						return
					}

					console.log('Unsupported response in products.imageUploadProduct', response)
					res.status(500)
					res.send()
				}).catch(function (error) {
					console.error('Unexpected error in products.imageUploadProduct', error.stack || error)
					res.status(500)
					res.send()
				})
			} catch (error) {
				/* Catch validation errors */
				res.status(400)
				res.send(error)
			}
		}
	)

	app.put(
		'/product/:id',
		function (req, res) {
			try {
				function __body() {
					const __contentType = req.get('Content-Type')
					const __mimeType = __contentType ? __contentType.replace(/;.*/, '') : undefined

					if (__mimeType === 'application/json') {
						return v.modelApiCreateProductFromJson('body', req.body)
					}
					console.error(`Invalid request content type: ${__contentType}`)
					throw new Error(`Invalid request content type: ${__contentType}`)
				}

				impl.updateProduct(v.parseString('params.id', req.params['id']), __body()).then(function (response) {
					if (response.status === 200) {
						let body: any
						try {
							body = v.modelApiUpdateProduct200ResponseToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in products.updateProduct', error)
							res.status(500)
							res.send()
							return
						}

						res.status(200)
						res.send(body)
						return
					}
					if (response.status === 500) {
						let body: any
						try {
							body = v.modelApiUpdateProduct500ResponseToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in products.updateProduct', error)
							res.status(500)
							res.send()
							return
						}

						res.status(500)
						res.send(body)
						return
					}

					console.log('Unsupported response in products.updateProduct', response)
					res.status(500)
					res.send()
				}).catch(function (error) {
					console.error('Unexpected error in products.updateProduct', error.stack || error)
					res.status(500)
					res.send()
				})
			} catch (error) {
				/* Catch validation errors */
				res.status(400)
				res.send(error)
			}
		}
	)

	app.post(
		'/products',
		function (req, res) {
			try {
				function __body() {
					const __contentType = req.get('Content-Type')
					const __mimeType = __contentType ? __contentType.replace(/;.*/, '') : undefined

					if (__mimeType === 'application/json') {
						return v.modelApiCreateProductFromJson('body', req.body)
					}
					console.error(`Invalid request content type: ${__contentType}`)
					throw new Error(`Invalid request content type: ${__contentType}`)
				}

				impl.createProduct(__body()).then(function (response) {
					if (response.status === 201) {
						let body: any
						try {
							body = v.modelApiCreateProduct201ResponseToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in products.createProduct', error)
							res.status(500)
							res.send()
							return
						}

						res.status(201)
						res.send(body)
						return
					}
					if (response.status === 500) {
						let body: any
						try {
							body = v.modelApiCreateProduct500ResponseToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in products.createProduct', error)
							res.status(500)
							res.send()
							return
						}

						res.status(500)
						res.send(body)
						return
					}

					console.log('Unsupported response in products.createProduct', response)
					res.status(500)
					res.send()
				}).catch(function (error) {
					console.error('Unexpected error in products.createProduct', error.stack || error)
					res.status(500)
					res.send()
				})
			} catch (error) {
				/* Catch validation errors */
				res.status(400)
				res.send(error)
			}
		}
	)

}
